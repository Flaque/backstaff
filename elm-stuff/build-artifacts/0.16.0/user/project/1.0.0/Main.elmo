Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var getLine = function (myPath) {    return A2($Graphics$Collage.traced,$Graphics$Collage.solid($Color.black),myPath);};
   var linePath = F2(function (_p1,_p0) {
      var _p2 = _p1;
      var _p3 = _p0;
      return $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: _p2._0,_1: _p2._1},{ctor: "_Tuple2",_0: _p3._0,_1: _p3._1}]));
   });
   var points = function (list) {
      var _p4 = list;
      if (_p4.ctor === "[]") {
            return _U.list([]);
         } else {
            if (_p4._1.ctor === "[]") {
                  return _U.list([]);
               } else {
                  var _p6 = _p4._1._0._1;
                  var _p5 = _p4._1._0._0;
                  return A2($List._op["::"],
                  getLine(A2(linePath,{ctor: "_Tuple2",_0: _p4._0._0,_1: _p4._0._1},{ctor: "_Tuple2",_0: _p5,_1: _p6})),
                  points(A2($List._op["::"],{ctor: "_Tuple2",_0: _p5,_1: _p6},_p4._1._1)));
               }
         }
   };
   var pointList = _U.list([{ctor: "_Tuple2",_0: -50.0,_1: 10.0}
                           ,{ctor: "_Tuple2",_0: 5.0,_1: 15.0}
                           ,{ctor: "_Tuple2",_0: 15.0,_1: -5.0}
                           ,{ctor: "_Tuple2",_0: 35.0,_1: 50.0}
                           ,{ctor: "_Tuple2",_0: 50.0,_1: -20.0}]);
   var dotSize = 2;
   var makeCircle = function (_p7) {
      var _p8 = _p7;
      return A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: _p8._0,_1: _p8._1},A2($Graphics$Collage.filled,$Color.black,$Graphics$Collage.circle(dotSize)));
   };
   var circles = function (list) {
      var _p9 = list;
      if (_p9.ctor === "[]") {
            return _U.list([]);
         } else {
            if (_p9._1.ctor === "[]") {
                  return _U.list([makeCircle({ctor: "_Tuple2",_0: _p9._0._0,_1: _p9._0._1})]);
               } else {
                  return A2($List._op["::"],makeCircle({ctor: "_Tuple2",_0: _p9._0._0,_1: _p9._0._1}),circles(_p9._1));
               }
         }
   };
   var boxWidth = 500;
   var yAxisPath = $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: 0 - boxWidth,_1: 0},{ctor: "_Tuple2",_0: boxWidth,_1: 0}]));
   var yAxis = A2($Graphics$Collage.traced,$Graphics$Collage.dashed($Color.black),yAxisPath);
   var boxHeight = 400;
   var xAxisPath = $Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: 0,_1: 0 - boxHeight},{ctor: "_Tuple2",_0: 0,_1: boxHeight}]));
   var xAxis = A2($Graphics$Collage.traced,$Graphics$Collage.dashed($Color.black),xAxisPath);
   var forms = A2($List.append,A2($List._op["::"],xAxis,A2($List._op["::"],yAxis,circles(pointList))),points(pointList));
   var main = A3($Graphics$Collage.collage,boxWidth,boxHeight,forms);
   return _elm.Main.values = {_op: _op
                             ,boxHeight: boxHeight
                             ,boxWidth: boxWidth
                             ,dotSize: dotSize
                             ,main: main
                             ,pointList: pointList
                             ,forms: forms
                             ,points: points
                             ,circles: circles
                             ,makeCircle: makeCircle
                             ,xAxis: xAxis
                             ,xAxisPath: xAxisPath
                             ,yAxis: yAxis
                             ,yAxisPath: yAxisPath
                             ,linePath: linePath
                             ,getLine: getLine};
};