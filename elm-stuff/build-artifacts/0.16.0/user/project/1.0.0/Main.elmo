Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var getOffset = F2(function (scale,min) {    return min / 2 * (1 - scale);});
   var getHeight = F2(function (max,scale) {    return max * scale;});
   var rectWidth = 10;
   var boxWidth = 300;
   var boxHeight = 100;
   var myRect = F2(function (offset,scale) {
      return A2($Graphics$Collage.move,
      {ctor: "_Tuple2",_0: offset - boxWidth / 2 + rectWidth,_1: 0 - A2(getOffset,boxHeight,scale) - boxHeight / 2},
      A2($Graphics$Collage.filled,$Color.black,A2($Graphics$Collage.rect,rectWidth,A2(getHeight,100,scale))));
   });
   var main = A3($Graphics$Collage.collage,boxWidth,boxHeight,_U.list([A2(myRect,0,0.1),A2(myRect,20,0.5),A2(myRect,40,0.3),A2(myRect,60,0.6)]));
   return _elm.Main.values = {_op: _op
                             ,boxHeight: boxHeight
                             ,boxWidth: boxWidth
                             ,rectWidth: rectWidth
                             ,main: main
                             ,getHeight: getHeight
                             ,getOffset: getOffset
                             ,myRect: myRect};
};